<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>log on yoan.log</title>
    <link>https://myoan.github.io/tags/log/</link>
    <description>Recent content in log on yoan.log</description>
    <image>
      <url>https://myoan.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://myoan.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 21 Mar 2022 11:19:25 +0900</lastBuildDate><atom:link href="https://myoan.github.io/tags/log/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GKEからのGCPへの認証をまとめる</title>
      <link>https://myoan.github.io/posts/gke-gcp-auth/</link>
      <pubDate>Mon, 21 Mar 2022 11:19:25 +0900</pubDate>
      
      <guid>https://myoan.github.io/posts/gke-gcp-auth/</guid>
      <description>GKE cluster作成時にも指定できるアクセススコープはレガシー扱いになっている https://cloud.google.com/kubernetes-engine/docs/how-to/access-scopes#what_are_access_scopes
とはいえチュートリアルには--scopeを利用したものも見受けられる
 https://agones.dev/site/docs/installation/creating-cluster/gke/  アクセススコープは手軽だが細かい設定ができない。ServiceAccountを使うと必要最低限の権限のみ付与する事ができるので、セキュリティの品質が保たれるためGoogleとしてはServiceAccountを推している。という認識でいいのかな.
GKEの権限関係で迷わないよう、サービス アカウントを使用した Google Cloud への認証を題材にやり方を整理する
 アクセススコープを用いた認証 ServiceAccountを用いた認証 (おまけ) ServiceAccount認証にWorkload Identityを用いる  事前準備 題材に則りpubsub topicを作成し、publishとsubscribeができるか検証する
pubsub topicの作成 gcloud pubsub topics create echo gcloud pubsub subscriptions create echo-read --topic=echo ソースコード取得 git clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples cd kubernetes-engine-samples cloud-pubsub/deployment以下のyamlファイルを実際に適応していく
1. アクセススコープを用いた認証 クラスタ作成
gcloud container clusters create pubsub-test --scopes=gke-default,https://www.googleapis.com/auth/pubsub --zone asia-northeast1-a scope オプションについて --scopesオプションをつけることでクラスタに権限を付与できる gke-defaultは下記のscopeをまとめたエイリアスになる
Alias URI gke-default https://www.googleapis.com/auth/devstorage.read_only https://www.googleapis.com/auth/logging.write https://www.googleapis.com/auth/monitoring https://www.googleapis.com/auth/service.management.readonly https://www.googleapis.com/auth/servicecontrol https://www.googleapis.com/auth/trace.append gcloud container clusters create --helpをすると他のエイリアスもあるのでみてみると良い (webのmanにも載っている)</description>
    </item>
    
    <item>
      <title>coreutilsのソースコードをDLする方法</title>
      <link>https://myoan.github.io/posts/read-coreutils/</link>
      <pubDate>Sat, 11 Dec 2021 18:04:58 +0900</pubDate>
      
      <guid>https://myoan.github.io/posts/read-coreutils/</guid>
      <description>aspのinstall $ sudo pacman asp aspの簡単な使い方 # packageの一覧 $ asp list-all # packageの取得 $ asp checkout coreutils coreutilsのダウンロード $ asp checokut coreutils $ cd coreutils $ makepkg -o # buildはせずDLだけするオプション 詰まったところ GPGキーがverifiyされない makepkgの実行中で下記のようなエラーが発生した
 -&amp;gt; Found 01-fix-fs72253.patch ==&amp;gt; Validating source files with sha256sums... coreutils-9.0.tar.xz ... Passed coreutils-9.0.tar.xz.sig ... Skipped 01-fix-fs72253.patch ... Passed ==&amp;gt; Verifying source file signatures with gpg... coreutils-9.0.tar.xz ... FAILED (unknown public key DF6FD971306037D9) ==&amp;gt; ERROR: One or more PGP signatures could not be verified!</description>
    </item>
    
    <item>
      <title>go getで取得したコマンドの名前を変更する</title>
      <link>https://myoan.github.io/posts/duplicate-command/</link>
      <pubDate>Sat, 06 Feb 2021 16:25:03 +0900</pubDate>
      
      <guid>https://myoan.github.io/posts/duplicate-command/</guid>
      <description>yeomanを入れて実行したところエラー
❯ yo code must specify 3 arguments 確認したところspannerのgeneratorであるyoがすでに入っていました&amp;hellip;
❯ yo help yo is a command-line tool to generate Go code for Google Cloud Spanner. (混乱を避けるため、以降ではコードブロック以外yoはspannerのコードジェネレートツールを指します)
両方利用したかったのでspanner generatorのyoを別名に書き換える方針で決めました。 その名もgoyoです(ババーン)
本題 ではどうやったらgo getで取得したコマンド名を変えられるのか？
go getのオプションを探しましたがありませんでした
そこで仕方なくyoの名前自体を変更します
yoはバイナリが入っていると思ったらシェルスクリプトでした (goenvを使っているとそうなる？)
❯ file ~/.anyenv/envs/goenv/shims/yo /Users/motoki.yoan/.anyenv/envs/goenv/shims/yo: Bourne-Again shell script text executable, ASCII text ❯ cat ~/.anyenv/envs/goenv/shims/yo #!/usr/bin/env bash set -e [ -n &amp;#34;$GOENV_DEBUG&amp;#34; ] &amp;amp;&amp;amp; set -x program=&amp;#34;${0##*/}&amp;#34; if [[ &amp;#34;$program&amp;#34; = &amp;#34;go&amp;#34;* ]]; then for arg; do case &amp;#34;$arg&amp;#34; in -c* | -- ) break ;; */* ) if [ -f &amp;#34;$arg&amp;#34; ]; then export GOENV_FILE_ARG=&amp;#34;$arg&amp;#34; break fi ;; esac done fi export GOENV_ROOT=&amp;#34;/Users/me/.</description>
    </item>
    
    <item>
      <title>git restoreってなんだ</title>
      <link>https://myoan.github.io/posts/git-restore/</link>
      <pubDate>Fri, 08 Jan 2021 20:48:37 +0900</pubDate>
      
      <guid>https://myoan.github.io/posts/git-restore/</guid>
      <description>不適切なファイルをgit addしてしまいました
weblog % git add content/posts/git-restore.md weblog % git status On branch main Your branch is up to date with &#39;origin/main&#39;. Changes to be committed: (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage) new file: content/posts/git-restore.md こういった場合 git reset &amp;lt;FILE&amp;gt;を使ってunstagedにしていました
が、上の例にもあるけど、git restoreを使えというサジェストが出ています そもそも気がついたときのログにはadd/rmのサジェストも出ています
Changes not staged for commit: (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed) (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)  git add/rm: commitされた内容を更新する git restore: working directoryの内容を破棄する  という違いがあるようです 今回のように間違ってaddしてしまった場合は、git restoreの方が正しそうです。 試してみます。</description>
    </item>
    
  </channel>
</rss>
